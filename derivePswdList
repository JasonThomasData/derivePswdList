#!/usr/bin/env python3

import os
import sys
import datetime
import rules


strings_to_process_queue = []
derived_strings = set()

def get_base_string_arg():
    args = sys.argv
    try:
        assert len(args) == 2
        return args[1]
    except (IndexError, AssertionError):
        error_message = 'Enter one base word to produce derived strings.'
        print(error_message)
        sys.exit()

def process_strings_queue():
    while len(strings_to_process_queue) > 0:
        string_to_process = strings_to_process_queue.pop(0)
        enumerate_string(string_to_process)

def enumerate_string(string_to_process):
    for i, char in enumerate(string_to_process):
        try:
            enumerate_rules(char, i, string_to_process)
        except KeyError:
            pass

def enumerate_rules(char, i, string_to_process):
    relevant_rules = rules.RULES[char]
    for rule in relevant_rules:
        new_string = create_new_string(rule, i, string_to_process)
        add_new_unique_string(new_string)

def create_new_string(rule, i, string_to_process):
    tmp_list = list(string_to_process)
    tmp_list[i] = rule
    new_theorem = ''.join(tmp_list)
    return new_theorem

def add_new_unique_string(new_string):
    if new_string not in derived_strings:
        strings_to_process_queue.append(new_string)
        derived_strings.add(new_string)

def dump_to_file(file_name):
    remove_existing_file(base_string)
    with open(file_name, 'w') as file_writer:
        for theorem in derived_strings:
            file_writer.write(theorem + '\n')

def remove_existing_file(file_name):
    try:
        os.remove(file_name)
    except FileNotFoundError:
        pass

def report_time_taken(time_started, time_finished):
    time_taken = time_finished - time_started
    message = 'Process took {}'.format(time_taken)
    print(message)

if __name__ == "__main__":
    time_started = datetime.datetime.now()
    rules.add_rules_lower_to_upper()
    rules.add_rules_upper_to_lower()
    base_string = get_base_string_arg()
    strings_to_process_queue.append(base_string)
    process_strings_queue()
    dump_to_file(base_string)
    time_finished = datetime.datetime.now()
    report_time_taken(time_started, time_finished)
